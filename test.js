const net = require('net');
const fs = require('fs');
var crypto = require('crypto')

const port = 10075;
const host = '0.0.0.0';

const server = net.createServer();
server.listen(port, host, () => {
	console.log('Test TCP Server is running on port ' + port + '.');
});

let sockets = [];
let state = 0;

const JOIN_PACKET = [
	"\x92\x40\x00\xf4\xf8\x7a\xf7\x34",
	"\x25\xc8\x9a\x6d\xa9\xdd\xeb\xab",
	"\xa8\x3c\xa6\xe6\xb4\x72\x6d\xef",
	"\x51\x23\x00\xde\xea\x43\xd5\x8f",
	"\x22\x50\x3f\xaf\x9c\x52\x96\x10",
	"\x7c\xa4\xbe\xa9\x57\x8a\xae\x49",
	"\x68\x06\x20\x73\xc6\x24\xa8\x07",
	"\xad\x44\xd2\x54\x29\x8d\x58\xb6",
	"\x3c\xda\x3b\xe4\x33\x8c\x57"
];

function toHexString(byteArray) {
	return Array.from(byteArray, function(byte) {
		return "" + ('0' + (byte & 0xFF).toString(16)).slice(-2);
	}).join(' ');
}

server.on('connection', function(sock) {

	console.log('CONNECTED: ' + sock.remoteAddress + ':' + sock.remotePort);
	sockets.push(sock);

	sock.on('data', function(data) {

		console.log('RECV: ' + sock.remoteAddress + ':' + sock.remotePort + ' > ' + toHexString(data));

		var packet = [];

		if (state == 0) {

			if (data != JOIN_PACKET.join('')) {
				console.log("CLOSED: {0}:{1}\nbecause: {2}".format(sock.remoteAddress, sock.remotePort, toHexString(data)));
				sock.end();
				return;
			}

			packet = [
				"\x1a\x40\x00\x22\xf8\x7a\xf7\x34\x25\xc8\x9a\x6d\xa9\xdd\xeb\xab",
				"\xa8\x3c\xa6\xe6\xb4\x72\x6d\xef\x51\x23\x00\xde\xea\x43\xd5\x8f",
				"\x22\x50\x3f\xaf\x9c\x52\x96\x10\x7c\xa4\xbe\xa9\x57\x8a\xae\x49",
				"\x68\x06\x20\x73\xc6\x24\xa8\x07\xad\x44\xd2\x54\x29\x8d\x58\xb6",
				"\x3c\xda\x3b\xe4\x33\x8c\x57"
			];
			state++;
		} else if (state == 1) {
			console.log("==== STATE 1");
			packet = [
				"\x93\x40\x00\xdf\x52\xa0\xed\x1a\x7a\x8b\x4c\x41\x50\x6e\xd9\xdc",
				"\xa6\x2c\xe3\xb2\x26\xdd\x2a\x4a\x34\x91\xe8\x05\x68\xa5\xe1\x45",
				"\x43\x62\xb8\x9e\x75\x68\x59\x50\xee\x48\x80\xdb\x5b\x66\xe1\x6c",
				"\xf9\xb2\x3d\xa8\x75\xe4\xa7\x92\xfa\x77\x01\x4c\x7d\x54\x4e\xca",
				"\xc3\xa8\x68\x18\xbd\x9c\xaf"
			];
			state++;
		} else if (state == 2) {
			console.log("==== STATE 2");
			packet = [
				"\x94\x40\x00\x66\x6e\xd6\x71\x34\x42\x44\x93\xf9\x46\xc4\x2c\x3d",
				"\xd1\x0c\x2c\x49\x2f\xef\x0f\xf8\xe8\x29\xfd\x32\x4e\x3f\x7c\xca",
				"\x9a\x4b\xac\x74\x59\xe0\x41\xb1\x0c\xcd\x50\x0d\x57\x95\x5f\xad",
				"\x53\x99\x83\xce\x09\x9e\x65\x03\x3e\x50\x57\x66\xe7\x8c\x24\x14",
				"\x3d\x62\x97\x8d\xf7\x43\x72\x87\x17\x00\xcd\xeb\xc0\x74\x7f\x0f",
				"\x52\xca\xad\x4b\x42\xae\x74\x30\x0f\x7d\x67\xbc\xd6\x4f\x3e\xb1",
				"\x58\xed\x62\xa0\x87\x9a\x02\x00\xbc\x0b\xae\x7a\x94\xcf"
			];
			state++;
		} else if (state == 2) {
			console.log("==== STATE 3");
			packet = [
				"\x8a\x36\x00\xa3\xde\xc6\x32\x28\xaf\xed\x24\xd7\x52\xf9\x40\x13",
				"\xbd\x0b\x1f\x45\x95\x24\x67\xbf\x4b\x38\x12\x86\x1f\x87\xf2\x68",
				"\xc9\xb9\xe2\x59\xba\x37\x8f\x28\x7d\x8a\xaa\x89\xfc\x83\x13\xa5",
				"\xe2\xf2\x98\x96\x5d\x7b\x9d\x4b\xb8\x6d\xcd\xdc\x80\x8a\x36\x00",
				"\xe5\xd7\xaa\x31\x93\xfc\x97\x44\xd8\x37\xc2\xbb\x97\x14\x66\x5a",
				"\x6f\x34\xe3\xb1\xa6\x35\xc6\xa7\xc2\x1e\x1c\x34\x23\x58\xd4\xcc",
				"\x21\x1c\x0a\x84\xb1\x97\x47\xe6\xbf\xd2\x36\x6f\xd6\xf4\x75\xa3",
				"\xe0\xec\x91\x25\x66\x8e\x69\x6c\x38\xaa"
			];
			state++;
		}

		// Handle disconnect
		if (data == "\x01\x00\x00") {
			sock.end();
		}

		if (packet != null && packet.length > 0) {
			var packetStr = packet.join('');
			sock.write(packetStr);

			var myBuffer = [];
			var buffer = new Buffer(packetStr, 'binary');
			for (var i=0; i<buffer.length; i++) {
				myBuffer.push(buffer[i]);
			}

			console.log('SENT: ' + sock.remoteAddress + ':' + sock.remotePort + ' > ' + toHexString(myBuffer));
		}

	});

	// Add a 'close' event handler to this instance of socket
	sock.on('close', function(data) {
		let index = sockets.findIndex(function(o) {
			return o.remoteAddress === sock.remoteAddress && o.remotePort === sock.remotePort;
		})
		if (index !== -1) {
			sockets.splice(index, 1);
		}
		console.log('DISCONNECTED: ' + sock.remoteAddress + ':' + sock.remotePort);
	});
});
